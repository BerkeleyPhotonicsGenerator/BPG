"""
Module containing various classes used to systematically generate clean Lumerical script code
"""
import datetime
from typing import List


class LumericalCodeGenerator:
    """ This class enables the generation of lumerical .lsf code """
    def __init__(self):
        self._code = []

    def add_code(self, code: str) -> None:
        """
        Adds provided statement of code to the script file, and formats it accordingly
        Adds a semicolon and a newline character to each line to match standard LSF syntax

        Parameters
        ----------
        code : str
            Single string containing lumerical script
        """
        self._code.append(code + ';\n')

    def add_code_block(self, code: List[str]):
        """
        Adds a preformatted list of lines of code to the script file

        Parameters
        ----------
        code : List[str]
            Single string containing lumerical script
        """
        self._code += code

    def add_line(self, code: str) -> None:
        """
        Adds provided line of code to the script file
        Does not add a semicolon, but does add a newline character

        Parameters
        ----------
        code : str
            Single string containing lumerical script
        """
        self._code.append(code + '\n')

    def set(self, key: str, value) -> None:
        """
        Conveniently adds a set statement to the LSF file

        Parameters
        ----------
        key : str
            parameter to be changed with the set statement
        value : any
            value that the parameter will be assigned
        """
        if isinstance(value, str):
            self.add_code('set("{}", "{}")'.format(key, value))
        else:
            self.add_code('set("{}", {})'.format(key, value))

    def get_file_header(self):
        """
        Returns a list of strings that form the header of the script file

        Returns
        -------
        header : List[str]
            Contains comments for the header of the file
        """
        header = list('# Generated by the {} Python Class\n'.format(self.__class__.__name__))
        header.append('# Created on {}\n'.format(datetime.datetime.now()))
        return header


class LumericalSweepGenerator(LumericalCodeGenerator):
    """ This class enables the creation of .lsf files for swept variables """
    def __init__(self, filepath):
        LumericalCodeGenerator.__init__(self)
        self.filepath = filepath
        self._script_list = []

    def add_sweep_point(self, script_name):
        """
        Adds a given script name to the be run in the main sweep loop. Scripts are executed in the
        order in which they are added

        Parameters
        ----------
        script_name : str
            Name of script to be executed
        """
        self._script_list.append(script_name + '.lsf')

    def create_sweep_loop(self):
        self.add_code('clear')
        self.add_code('redrawoff')

        # Create the list of layout scripts to be run
        sweep_len = len(self._script_list)
        self.add_line('\n# Init variables')
        self.add_code('sweep_len={}'.format(sweep_len))
        self.add_code('script_list=cell({})'.format(sweep_len))
        self.add_line('\n# Add all scripts to be executed to the list')
        for count, name in enumerate(self._script_list):
            self.add_code('script_list{{{}}}="{}"'.format(count + 1, name))

        # Run a loop over all of the layout scripts
        self.add_line('\n# Main execution loop')
        self.add_line('for(i=1:sweep_len){')
        self.add_line('# Setup logic')
        self.add_code('addanalysisgroup')
        self.add_code('set("name", script_list{i})')
        # self.set('name', 'script_list{i}')
        self.add_code('groupscope(script_list{i})')

        self.add_line('\n# Run the script')
        self.add_code('feval(script_list{i})')

        self.add_line('\n# Teardown logic')
        self.add_code('switchtolayout')
        self.add_code('groupscope(script_list{i})')
        self.add_code('delete')
        self.add_code('groupscope("::model")')
        self.add_line('}')

    def export_to_lsf(self):
        """ Take all code in the database and export it to a lumerical script file """
        file = self.get_file_header()
        self.create_sweep_loop()
        file += self._code

        with open(self.filepath + '.lsf', 'w') as stream:
            stream.writelines(file)


class LumericalDesignGenerator(LumericalCodeGenerator):
    def __init__(self, filepath):
        """ Dummy class that simply mirrors Lumerical Code Generator for now """
        LumericalCodeGenerator.__init__(self)
        self.filepath = filepath

    def export_to_lsf(self):
        """ Take all code in the database and export it to a lumerical script file """
        file = self.get_file_header()
        file += self._code

        with open(self.filepath + '.lsf', 'w') as stream:
            stream.writelines(file)


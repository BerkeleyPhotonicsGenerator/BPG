#!/usr/bin/env python
"""
This module provides a command-line interface to using BPG
"""
import sys
import argparse
import os
import runpy
from pathlib import Path
from shutil import copyfile, copytree


def run(args):
    """ Sets up your path and runs """
    import BPG
    # Generate the content list
    if args.module:
        runpy.run_path(args.module, run_name='__main__')
    elif args.spec:
        plm = BPG.PhotonicLayoutManager(spec_file=args.spec)
        plm.generate_content()

        if args.gds:
            plm.generate_gds()

        # Flat gds generation, lsf, or dataprep requires generation of flat content list
        if args.flat_gds or args.lsf or args.dataprep:
            plm.generate_flat_content()

        if args.flat_gds:
            plm.generate_flat_gds()
        if args.lsf:
            plm.generate_lsf()
        if args.dataprep:
            plm.dataprep()
            plm.generate_dataprep_gds()
    else:
        raise ValueError("You must provide either a python module or a spec file to run")


def setup():
    """ Copy over files """
    root = os.getcwd()
    install_dir = os.path.dirname(os.path.realpath(__file__)) + '/workspace_setup'

    # Create temp directory
    tmp_dir = Path(root) / 'tmp'
    tmp_dir.mkdir(exist_ok=True)

    # Copy over basic files
    copyfile(install_dir + '/.gitignore', root + '/.gitignore')
    copyfile(install_dir + '/sourceme.sh', root + '/sourceme.sh')
    copytree(install_dir + '/../../examples' + '/tech', root + '/example_tech')


def setup_test():
    """ Copy over files """
    # The root directory is where the workspace will be created, setup files are stored locally
    root = os.getcwd()
    install_dir = os.path.dirname(os.path.realpath(__file__)) + '/workspace_setup'

    # Copy over basic files
    copytree(install_dir + '/../../tests', root + '/bpg_test_suite')


def get_cmd_line_args(arg_list):
    # Change module search path to include the directory where bpg is invoked
    sys.path = [os.getcwd()] + sys.path
    parser = argparse.ArgumentParser()
    # List of possible actions
    parser.add_argument('action', help="""
    run: generates the desired output based on provided spec file and flags,
    shell: launches an iPython session for quick prototyping and debugging,
    setup: starts a new project based on the standard BPG project template,
    test : runs the BPG test suite
    """)
    parser.add_argument('-s', '--spec',
                        help='the spec file to be used',
                        )
    parser.add_argument('-c', '--config',
                        help='the bag config file to be used',
                        )
    parser.add_argument('-m', '--module',
                        help='run a python file in BPG')

    # Output types
    parser.add_argument('--gds',
                        help='flag to generate a gds',
                        action='store_true'
                        )
    parser.add_argument('--flat_gds',
                        help='flag to generate a flat gds',
                        action='store_true'
                        )
    parser.add_argument('--lsf',
                        help='flag to generate a lsf',
                        action='store_true'
                        )
    parser.add_argument('--dataprep',
                        help='flag to run dataprep and generate a dataprep gds',
                        action='store_true')
    args = parser.parse_args(arg_list)
    return args


def main(arg_list):
    """ Entry point for actions that bpg can take """
    args = get_cmd_line_args(arg_list)
    # action switch statement
    if args.action == 'run':
        run(args)
    elif args.action == 'setup':
        setup()
    elif args.action == 'setup_test':
        setup_test()
    elif args.action == 'shell':
        from IPython import embed
        embed()
    else:
        print(f'{args.action} is an invalid action')
        return -1


if __name__ == '__main__':
    # Grab the arguments, but ignore the name of the script that is being run
    main(sys.argv[1:])

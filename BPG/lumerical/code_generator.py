"""
Module containing classes used to systematically generate clean Lumerical script code
"""
import datetime
from typing import List, Dict, Any, Union


class LumericalCodeGenerator:
    """ This is the base class that encapsulates the generation of lumerical .lsf code """
    def __init__(self, config=None):
        self.config: Dict[str, Any] = config
        self._code: List[str] = []

    def add_code(self, code: Union[str, list]) -> None:
        """
        Adds provided statement of code to the script file, and formats it accordingly
        Adds a semicolon and a newline character to each line to match standard LSF syntax

        Parameters
        ----------
        code : str
            Single string containing lumerical script
        """
        if isinstance(code, str):
            code = [code]
        for line in code:
            self._code.append(line + ';\n')

    def add_formatted_code_block(self, code: List[str]):
        """
        Adds a pre-formatted list of lines of code to the script file

        Parameters
        ----------
        code : List[str]
            Single string containing lumerical script
        """
        self._code += code

    def add_formatted_line(self, code: str) -> None:
        """
        Adds provided line of code to the script file
        Does not add a semicolon, but does add a newline character

        Parameters
        ----------
        code : str
            Single string containing lumerical script
        """
        self._code.append(code + '\n')

    def set(self, key: str, value) -> None:
        """
        Conveniently adds a set statement to the LSF file

        Parameters
        ----------
        key : str
            parameter to be changed with the set statement
        value : any
            value that the parameter will be assigned
        """
        if value is not None:
            if isinstance(value, str):
                self.add_code('set("{}", "{}")'.format(key, value))
            else:
                self.add_code('set("{}", {})'.format(key, value))

    def get_file_header(self):
        """
        Returns a list of strings that form the header of the script file

        Returns
        -------
        header : List[str]
            Contains comments for the header of the file
        """
        header = list('# Generated by the {} Python Class\n'.format(self.__class__.__name__))
        header.append('# Created on {}\n'.format(datetime.datetime.now()))
        return header


class LumericalSweepGenerator(LumericalCodeGenerator):
    """ This class enables the creation of .lsf files for swept variables """
    def __init__(self, filepath):
        LumericalCodeGenerator.__init__(self, None)
        self.filepath = filepath
        self._script_list = []

    def add_sweep_point(self, script_name):
        """
        Adds a given script name to the be run in the main sweep loop. Scripts are executed in the
        order in which they are added

        Parameters
        ----------
        script_name : str
            Name of script to be executed
        """
        self._script_list.append(script_name + '.lsf')

    def create_sweep_loop(self):
        self.add_code('newproject')
        self.add_code('clear')
        self.add_code('redrawoff')

        # Create the list of layout scripts to be run
        sweep_len = len(self._script_list)
        self.add_formatted_line('\n# Init variables')
        self.add_code('sweep_len={}'.format(sweep_len))
        self.add_code('script_list=cell({})'.format(sweep_len))
        self.add_formatted_line('\n# Add all scripts to be executed to the list')
        for count, name in enumerate(self._script_list):
            self.add_code('script_list{{{}}}="{}"'.format(count + 1, name))

        # Run a loop over all of the layout scripts
        self.add_formatted_line('\n# Main execution loop')
        self.add_formatted_line('for(i=1:sweep_len){')
        self.add_formatted_line('\t# Setup logic')
        self.add_code('\taddanalysisgroup')
        self.add_code('\tset("name", script_list{i})')
        self.add_code('\tgroupscope(script_list{i})')

        self.add_formatted_line('\n\t# Run the script')
        self.add_code('\tfeval(script_list{i})')

        self.add_formatted_line('\n\t# Teardown logic')
        self.add_code('\tswitchtolayout')
        self.add_code('\tgroupscope(script_list{i})')
        self.add_code('\tdelete')
        self.add_code('\tgroupscope("::model")')
        self.add_formatted_line('}')

    def export_to_lsf(self):
        """ Take all code in the database and export it to a lumerical script file """
        file = self.get_file_header()
        self.create_sweep_loop()
        file += self._code

        with open(self.filepath + '.lsf', 'w') as stream:
            stream.writelines(file)


class LumericalDesignGenerator(LumericalCodeGenerator):
    def __init__(self, filepath):
        """ Dummy class that simply mirrors Lumerical Code Generator for now """
        LumericalCodeGenerator.__init__(self)
        self.filepath = filepath

    def export_to_lsf(self):
        """ Take all code in the database and export it to a lumerical script file """
        file = self.get_file_header()
        file += self._code

        with open(self.filepath + '.lsf', 'w') as stream:
            stream.writelines(file)


class LumericalMaterialGenerator(LumericalCodeGenerator):
    """ This class enables BPG to create a custom set of materials for use in Lumerical """
    def __init__(self, filepath):
        LumericalCodeGenerator.__init__(self)
        self.filepath = filepath

    def add_material(self, name) -> None:
        """
        Each time this is called a new material with the provided name is created

        Parameters
        ----------
        name : str
            name of the new material being created
        """
        self.add_code(f'matname = "{name}"')
        self.add_code('newmaterial = addmaterial("Lorentz")')  # TODO: What is Lorentz, do we need other options here?
        self.add_code(f'setmaterial(newmaterial, "name", matname)')

    def add_property(self, prop_name, prop_value) -> None:
        """
        Each time this method is called, an lsf line setting the property value to the property name is added

        Parameters
        ----------
        prop_name : str
            name of the property to be set
        prop_value : Any
            value of the property to be set
        """
        if isinstance(prop_value, str):
            self.add_code(f'setmaterial(matname,"{prop_name}","{prop_value}")')
        else:
            self.add_code(f'setmaterial(matname,"{prop_name}",{prop_value})')

    def import_material_from_dict(self, material_name: str, prop_dict: dict) -> None:
        """
        Creates and configures a new material given the properties inside the dictionary.

        Parameters
        ----------
        material_name : str
            the name of the new material to be created
        prop_dict : dict
            dict containing all the property info necessary to define the material
        """
        self.add_material(material_name)
        for key, value in prop_dict.items():
            self.add_property(key, value)

    def import_material_file(self, material_dict) -> None:
        """
        Takes a dictionary containing other dictionaries and creates an lsf file that defines all of the materials and
        their properties. Each key in the top level dict is the name of the material, and each value is a dictionary
        containing the material properties.

        Parameters
        ----------
        material_dict : dict
            dict of dicts specifying the materials to be created
        """
        for key, value in material_dict.items():
            self.import_material_from_dict(material_name=key, prop_dict=value)

    def export_to_lsf(self):
        file = self.get_file_header()
        file += self._code
        with open(self.filepath, 'w+') as stream:
            stream.writelines(file)
